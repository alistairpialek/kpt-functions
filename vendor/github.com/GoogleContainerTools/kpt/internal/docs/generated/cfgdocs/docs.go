// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "mdtogo"; DO NOT EDIT.
package cfgdocs

var CfgShort = `Display and modify JSON or YAML configuration`
var CfgLong = `
| Reads From              | Writes To                |
|-------------------------|--------------------------|
| local files or stdin    | local files or stdout    |

The ` + "`" + `cfg` + "`" + ` command group contains subcommands which read and write
local YAML files.  They are focused on providing porcelain on top
of workflows which would otherwise require viewing and editing YAML
directly.

Many cfg subcommands may also read from STDIN, allowing them to be paired
with other tools such as ` + "`" + `kubectl get` + "`" + `.
`
var CfgExamples = `
  # print the package using tree based structure
  $ kpt cfg tree helloworld --name --image --replicas
  helloworld
  ├── [deploy.yaml]  Deployment helloworld-gke
  │   ├── spec.replicas: 5
  │   └── spec.template.spec.containers
  │       └── 0
  │           ├── name: helloworld-gke
  │           └── image: gcr.io/kpt-dev/helloworld-gke:0.1.0
  └── [service.yaml]  Service helloworld-gke

  #  list available setters
  $ kpt cfg list-setters helloworld replicas
      NAME          DESCRIPTION        VALUE    TYPE     COUNT   SETBY
    replicas   'helloworld replicas'   5       integer   1
  
  # set a high-level knob
  $ kpt cfg set helloworld replicas 3
  set 1 fields
`

var AnnotateShort = `Set an annotation on one or more resources`
var AnnotateLong = `
  kpt cfg annotate DIR --kv KEY=VALUE...

Args:

  DIR:
    Path to a package directory
`
var AnnotateExamples = `
  # set an annotation on all Resources: 'key: value'
  kpt cfg annotate DIR --kv key=value

  # set an annotation on all Service Resources
  kpt cfg annotate DIR --kv key=value --kind Service

  # set an annotation on the foo Service Resource only
  kpt cfg annotate DIR --kv key=value --kind Service --name foo

  # set multiple annotations
  kpt cfg annotate DIR --kv key1=value1 --kv key2=value2
`

var CatShort = `Print the resources in a package`
var CatLong = `
  kpt cfg cat DIR
  
  DIR:
    Path to a package directory
`
var CatExamples = `
  # print Resource config from a directory
  kpt cfg cat my-dir/
`

var CountShort = `Print resource counts for a package`
var CountLong = `
  kpt cfg count [DIR]
  
  DIR:
    Path to a package directory.  Defaults to stdin if unspecified.
`
var CountExamples = `
  # print Resource counts from a directory
  kpt cfg count my-dir/

  # print Resource counts from a cluster
  kubectl get all -o yaml | kpt cfg count
`

var CreateSetterShort = `Create a setter for one or more field`
var CreateSetterLong = `
  kpt cfg create-setter DIR NAME VALUE
  
  DIR:
    Path to a package directory
  
  NAME:
    The name of the setter to create.  This is both the name that will
    be given to the *set* command, and that will be referenced by fields.
    e.g. replicas
  
  VALUE
    The value of the filed for which setter reference must be added.
    e.g. 3
`
var CreateSetterExamples = `
  # create a setter called replicas for fields matching value "3"
  kpt cfg create-setter DIR/ replicas 3

  # scope creating setter references to a specified field
  kpt cfg create-setter DIR/ replicas 3 --field "replicas"

  # scope creating setter references to a specified field path
  kpt cfg create-setter DIR/ replicas 3 --field "spec.replicas"

  # create a setter called replicas with a description and set-by
  kpt cfg create-setter DIR/ replicas 3 --set-by "package-default" \
      --description "good starter value"

  # scope create a setter with a type.  the setter will make sure the set fields
  # always parse as strings with a yaml 1.1 parser (e.g. values such as 1,on,true
  # will be quoted so they are parsed as strings)
  # only the final part of the the field path is specified
  kpt cfg create-setter DIR/ app nginx --field "annotations.app" --type string
`

var CreateSubstShort = `Create a substitution for one or more fields`
var CreateSubstLong = `
  kpt cfg create-subst DIR NAME --field-value VALUE --pattern PATTERN
  
  DIR
    Path to a package directory
  
  NAME
    The name of the substitution to create.  This is simply the unique key
    which is referenced by fields which have the substitution applied.
    e.g. image-substitution
  
  VALUE
    The current value of the field that will have PATTERN substituted.
    e.g. nginx:1.7.9
  
  PATTERN
    A string containing one or more MARKER substrings which will be
    substituted for setter values.  The pattern may contain multiple
    different MARKERS, the same MARKER multiple times, and non-MARKER
    substrings.
    e.g. ${image-setter}:${tag-setter}
`
var CreateSubstExamples = `
  
  # Automatically create setters when creating the substitution, inferring
  # the setter values.
  #
  # 1. create a substitution derived from 2 setters.  The user will never
  # call the substitution directly, instead it will be computed when the
  # setters are used.
  kpt cfg create-subst DIR/ image-tag --field-value nginx:v1.7.9 \
    --pattern \${image-setter}:\${tag-setter}
  
  # 2. update the substitution value by setting one of the 2 setters it is
  # computed from
  kpt cfg set . tag-setter v1.8.0
  
  # Manually create setters and substitution.  This is preferred to configure
  # the setters with a type, description, set-by, etc.
  #
  # 1. create the setter for the image name -- set the field so it isn't
  # referenced
  kpt cfg create-setter DIR/ image-setter nginx --field "none" \
      --set-by "package-default"
  
  # 2. create the setter for the image tag -- set the field so it isn't
  # referenced
  kpt cfg create-setter DIR/ tag-setter v1.7.9 --field "none" \
      --set-by "package-default"
  
  # 3. create the substitution computed from the image and tag setters
  kpt cfg create-subst DIR/ image-tag nginx:v1.7.9 \
    --pattern \${image-setter}:\${tag-setter}
  
  # 4. update the substitution value by setting one of the setters
  kpt cfg set . tag-setter v1.8.0
`

var DeleteSetterShort = `Delete a setter`
var DeleteSetterLong = `
  kpt cfg delete-setter DIR NAME
  
  DIR:
    Path to a package directory
  
  NAME:
    The name of the setter to delete. e.g. replicas
  
`
var DeleteSetterExamples = `
  # delete a setter replicas
  kpt cfg delete-setter DIR/ replicas
`

var DeleteSubstShort = `Delete a substitution`
var DeleteSubstLong = `
  kpt cfg delete-subst DIR NAME
  
  DIR:
    Path to a package directory
  
  NAME:
    The name of the substitution to delete. e.g. image-tag
  
`
var DeleteSubstExamples = `
  # delete a substitution image-tag
  kpt cfg delete-subst DIR/ image-tag
`

var FmtShort = `Format configuration files`
var FmtLong = `
  kpt cfg fmt [DIR]
  
  DIR:
    Path to a package directory.  Reads from STDIN if not provided.
`
var FmtExamples = `
  # format file1.yaml and file2.yml
  kpt cfg fmt file1.yaml file2.yml

  # format all *.yaml and *.yml recursively traversing directories
  kpt cfg fmt my-dir/

  # format kubectl output
  kubectl get -o yaml deployments | kpt cfg fmt

  # format kustomize output
  kustomize build | kpt cfg fmt
`

var GrepShort = `Filter resources by their field values`
var GrepLong = `
  kpt cfg grep QUERY DIR

Args:

      QUERY:
        Query to match expressed as 'path.to.field=value'.
        Maps and fields are matched as '.field-name' or '.map-key'
        List elements are matched as '[list-elem-field=field-value]'
        The value to match is expressed as '=value'
        '.' as part of a key or value can be escaped as '\.'
  
      DIR:
        Path to a package directory
`
var GrepExamples = `
  # find Deployment Resources
  kpt cfg grep "kind=Deployment" my-dir/

  # find Resources named nginx
  kpt cfg grep "metadata.name=nginx" my-dir/

  # use tree to display matching Resources
  kpt cfg grep "metadata.name=nginx" my-dir/ | kpt cfg tree

  # look for Resources matching a specific container image
  kpt cfg grep "spec.template.spec.containers[name=nginx].image=nginx:1\.7\.9" \
      my-dir/ | kpt cfg tree
`

var ListSettersShort = `List setters for a package`
var ListSettersLong = `
  kpt cfg list-setters DIR [NAME]
  
  DIR
    Path to a package directory
  
  NAME
    Optional.  The name of the setter to display.
`
var ListSettersExamples = `
  # list the setters in the hello-world package
  kpt cfg list-setters hello-world/
  
    NAME     VALUE    SET BY    DESCRIPTION   COUNT  
  replicas   4       isabella   good value    1
`

var SetShort = `Set one or more field values`
var SetLong = `
  kpt cfg set DIR NAME VALUE

Args:

  DIR
    Path to a package directory. e.g. hello-world/
  
  NAME
    The name of the setter. e.g. replicas
  
  VALUE
    The new value to set on fields. e.g. 3

Flags:

  --description
    Optional description about the value.
  
  --set-by
    Optional record of who set the value.  Clears the last set-by
    value if unset.
  
  --values
    Optional flag, the values of the setter to be set to
    e.g. used to specify values that start with '-'
`
var SetExamples = `
  # set replicas to 3 using the 'replicas' setter
  kpt cfg set hello-world/ replicas 3

  # set the replicas to 5 and include a description of the value
  kpt cfg set hello-world/ replicas 5 --description "need at least 5 replicas"

  # set the replicas to 5 and record who set this value
  kpt cfg set hello-world/ replicas 5 --set-by "mia"

  # set the tag portion of the image field to '1.8.1' using the 'tag' setter
  # the tag setter is referenced as a value by a substitution in the Kptfile
  kpt cfg set hello-world/ tag 1.8.1
`

var TreeShort = `Render resources using a tree structure`
var TreeLong = `
  kpt cfg tree [DIR] [flags]

Args:

  DIR:
    Path to a package directory.  Defaults to STDIN if not specified.

Flags:

  --args:
    if true, print the container args field
  
  --command:
    if true, print the container command field
  
  --env:
    if true, print the container env field
  
  --field:
    dot-separated path to a field to print
  
  --image:
    if true, print the container image fields
  
  --name:
    if true, print the container name fields
  
  --ports:
    if true, print the container port fields
  
  --replicas:
    if true, print the replica field
  
  --resources:
    if true, print the resource reservations
`
var TreeExamples = `
  # print Resources using directory structure
  kpt cfg tree my-dir/

  # print replicas, container name, and container image and fields for Resources
  kpt cfg tree my-dir --replicas --image --name

  # print all common Resource fields
  kpt cfg tree my-dir/ --all

  # print the "foo"" annotation
  kpt cfg tree my-dir/ --field "metadata.annotations.foo"

  # print the status of resources with status.condition type of "Completed"
  kubectl get all -o yaml | kpt cfg tree \
    --field="status.conditions[type=Completed].status"

  # print live Resources from a cluster using owners for graph structure
  kubectl get all -o yaml | kpt cfg tree --replicas --name --image

  # print live Resources with status condition fields
  kubectl get all -o yaml | kpt cfg tree \
    --name --image --replicas \
    --field="status.conditions[type=Completed].status" \
    --field="status.conditions[type=Complete].status" \
    --field="status.conditions[type=Ready].status" \
    --field="status.conditions[type=ContainersReady].status"
`
