// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "mdtogo"; DO NOT EDIT.
package consumer

var TektonGuide = `
In this tutorial, you will pull an example blueprint that declares Kubernetes resources and two kpt functions. Then you will export a pipeline that runs the functions against the resources on [Tekton] and modify it to make it fully functional. How to setting up Tekton is also included if you don't have one running yet. This tutorial takes about 20 minutes.

{{% pageinfo color="info" %}}
A kpt version ` + "`" + `v0.32.0` + "`" + ` or higher is required.
{{% /pageinfo %}}

## Before you begin

*New to Tekton? Here is a [Getting Started]*.

Before diving into the following tutorial, you need to create a public repo on GitHub if you don't have one yet, e.g. ` + "`" + `function-export-example` + "`" + `.

On your local machine, create an empty directory:

  mkdir function-export-example
  cd function-export-example

{{% pageinfo color="warning" %}}
All commands must be run at the root of this directory.
{{% /pageinfo %}}

Use ` + "`" + `kpt pkg get` + "`" + ` to fetch source files of this tutorial:

  # Init git
  git init
  git remote add origin https://github.com/<USER>/<REPO>.git
  # Fetch source files
  kpt pkg get https://github.com/GoogleContainerTools/kpt/package-examples/function-export-blueprint example-package

Then you will get an ` + "`" + `example-package` + "`" + ` directory:

- ` + "`" + `resources/resources.yaml` + "`" + `: declares a ` + "`" + `Deployment` + "`" + ` and a ` + "`" + `Namespace` + "`" + `.
- ` + "`" + `resources/constraints/` + "`" + `: declares constraints used by the ` + "`" + `gatekeeper-validate` + "`" + ` function.
- ` + "`" + `functions.yaml` + "`" + `: runs two functions from [Kpt Functions Catalog] declaratively:
  - ` + "`" + `gatekeeper-validate` + "`" + ` enforces constraints over all resources.
  - ` + "`" + `label-namespace` + "`" + ` adds a label to all Namespaces.

## Setting up Tekton on GCP

Follow the instructions in the [Getting Started] guide of Tekton.

1. Check the [prerequisites].
1. [Create a Kubernetes cluster] of version 1.15 or higher on Google Cloud.

    ` + "`" + `` + "`" + `` + "`" + `shell script
    gcloud container clusters create tekton-cluster --cluster-version=1.15
    ` + "`" + `` + "`" + `` + "`" + `

1. Install Tekton to the cluster.

    ` + "`" + `` + "`" + `` + "`" + `shell script
    kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
    ` + "`" + `` + "`" + `` + "`" + `

1. Verify every component listed in the following command has the status ` + "`" + `Running` + "`" + `.

    ` + "`" + `` + "`" + `` + "`" + `shell script
    kubectl get pods --namespace tekton-pipelines
    ` + "`" + `` + "`" + `` + "`" + `

To make the exported pipeline fully functional, you probably need to do the following steps

1. Install [Git Tasks] from Tekton Catalog.

    ` + "`" + `` + "`" + `` + "`" + `shell script
    kpt pkg get https://github.com/tektoncd/catalog/git@v1beta1 git
    kubectl apply -f git/git-clone.yaml
    ` + "`" + `` + "`" + `` + "`" + `

1. Provide a Persistent Volume for storage purposes.

    ` + "`" + `` + "`" + `` + "`" + `shell script
    cat <<EOF | kubectl apply -f -
    kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: workspace-pvc
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
    EOF
    ` + "`" + `` + "`" + `` + "`" + `

## Exporting a pipeline

  kpt fn export example-package --workflow tekton --output pipeline.yaml

Running this command will get a ` + "`" + `pipeline.yaml` + "`" + ` like this:

  apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
      name: run-kpt-functions
  spec:
      workspaces:
        - name: source
          mountPath: /source
      steps:
        - name: run-kpt-functions
          image: gcr.io/kpt-dev/kpt:latest
          args:
            - fn
            - run
            - $(workspaces.source.path)/example-package
          volumeMounts:
            - name: docker-socket
              mountPath: /var/run/docker.sock
      volumes:
        - name: docker-socket
          hostPath:
              path: /var/run/docker.sock
              type: Socket
  apiVersion: tekton.dev/v1beta1
  kind: Pipeline
  metadata:
      name: run-kpt-functions
  spec:
      workspaces:
        - name: shared-workspace
      tasks:
        - name: fetch-repository
          taskRef:
            name: git-clone
          workspaces:
            - name: output
              workspace: shared-workspace
          params:
            - name: url
              value: "https://github.com/<USER>/<REPO>.git"
            - name: deleteExisting
              value: "true"
        - name: kpt
          taskRef:
              name: run-kpt-functions
          workspaces:
            - name: source
              workspace: shared-workspace

## Run the pipeline via Tekton CLI

  git add .
  git commit -am 'Init pipeline'
  git push --set-upstream origin master

Once local changes are committed and pushed. Start the pipeline:

  kubectl apply -f pipeline.yaml
  tkn pipeline start run-kpt-functions

In the prompt, enter ` + "`" + `shared-workspace` + "`" + ` as workspace name, leave ` + "`" + `Value of the Sub Path` + "`" + ` blank, select ` + "`" + `pvc` + "`" + ` as ` + "`" + `Type of the Workspace` + "`" + `, enter ` + "`" + `workspace-pvc` + "`" + ` as ` + "`" + `Value of Claim Name` + "`" + `.

{{< png src="images/fn-export/tekton-result" >}}

To view the output, run

  tkn pipeline logs

## Next step

Try to remove the ` + "`" + `owner: alice` + "`" + ` line in ` + "`" + `example-package/resources/resources.yaml` + "`" + `.

Once local changes are pushed, run the pipeline again, then you can see how it fails.
`
